// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: smaster.proto

#include "smaster.pb.h"
#include "smaster.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace smaster {

static const char* SMaster_method_names[] = {
  "/smaster.SMaster/authenticate",
};

std::unique_ptr< SMaster::Stub> SMaster::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SMaster::Stub> stub(new SMaster::Stub(channel));
  return stub;
}

SMaster::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_authenticate_(SMaster_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SMaster::Stub::authenticate(::grpc::ClientContext* context, const ::smaster::AuthRequest& request, ::smaster::AuthResponce* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_authenticate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::smaster::AuthResponce>* SMaster::Stub::AsyncauthenticateRaw(::grpc::ClientContext* context, const ::smaster::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::smaster::AuthResponce>::Create(channel_.get(), cq, rpcmethod_authenticate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::smaster::AuthResponce>* SMaster::Stub::PrepareAsyncauthenticateRaw(::grpc::ClientContext* context, const ::smaster::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::smaster::AuthResponce>::Create(channel_.get(), cq, rpcmethod_authenticate_, context, request, false);
}

SMaster::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SMaster_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SMaster::Service, ::smaster::AuthRequest, ::smaster::AuthResponce>(
          std::mem_fn(&SMaster::Service::authenticate), this)));
}

SMaster::Service::~Service() {
}

::grpc::Status SMaster::Service::authenticate(::grpc::ServerContext* context, const ::smaster::AuthRequest* request, ::smaster::AuthResponce* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace smaster

