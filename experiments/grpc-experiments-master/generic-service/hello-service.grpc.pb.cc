// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hello-service.proto

#include "hello-service.pb.h"
#include "hello-service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace hello_service {

static const char* Hello_method_names[] = {
  "/hello_service.Hello/sayHello",
};

std::unique_ptr< Hello::Stub> Hello::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Hello::Stub> stub(new Hello::Stub(channel));
  return stub;
}

Hello::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_sayHello_(Hello_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Hello::Stub::sayHello(::grpc::ClientContext* context, const ::hello_service::HelloRequest& request, ::hello_service::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sayHello_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hello_service::HelloReply>* Hello::Stub::AsyncsayHelloRaw(::grpc::ClientContext* context, const ::hello_service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::hello_service::HelloReply>::Create(channel_.get(), cq, rpcmethod_sayHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hello_service::HelloReply>* Hello::Stub::PrepareAsyncsayHelloRaw(::grpc::ClientContext* context, const ::hello_service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::hello_service::HelloReply>::Create(channel_.get(), cq, rpcmethod_sayHello_, context, request, false);
}

Hello::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Hello_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Hello::Service, ::hello_service::HelloRequest, ::hello_service::HelloReply>(
          std::mem_fn(&Hello::Service::sayHello), this)));
}

Hello::Service::~Service() {
}

::grpc::Status Hello::Service::sayHello(::grpc::ServerContext* context, const ::hello_service::HelloRequest* request, ::hello_service::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hello_service

